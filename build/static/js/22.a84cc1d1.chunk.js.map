{"version":3,"sources":["services/api/api.js","utils/index.js","services/api/powerbi.js","services/api/reports.js","pages/Report/index.jsx"],"names":["api","axios","create","baseURL","config","envApi","interceptors","request","use","a","token","getToken","headers","Authorization","setErrors","error","response","data","errors","message","handlePowerBiGroups","get","handlePowerBiReports","id","handlePowerBiReportAad","values","post","handlePowerBiReportEmbed","handleReportsByUserWithCard","userId","user_id","handleReportById","handleReport","reportId","report_id","handleStoreReport","history","setMessages","card","JSON","parse","name","group_id","dataset_id","roles","page_navigation","push","messages","alert","handleUpdateReport","put","handleReportDelete","delete","Page","params","useParams","useState","setData","useEffect","Promise","resolve","getUser","then","res","reportData","embedUrl","accessToken","type","models","TokenType","Aad","dataset","username","email","embedToken","Embed","embedConfig","tokenType","settings","panes","filters","visible","pageNavigation","cssClassName"],"mappings":"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","file":"static/js/22.a84cc1d1.chunk.js","sourcesContent":["import axios from 'axios'\nimport config from 'config'\nimport { getToken } from 'services/auth'\n\nconst api = axios.create({ baseURL: config.envApi })\n\napi.interceptors.request.use(\n    async config => {\n        const token = getToken()\n        if (token) config.headers.Authorization = `${token}`\n        return config\n    }\n)\n\nexport default api\n","export const setErrors = error => error.response.data.errors.message\n\nexport const cepMask = value =>\n    value.replace(/\\D+/g, '')\n        .replace(/(\\d{5})(\\d)/, '$1-$2')\n        .replace(/(-\\d{3})\\d+?$/, '$1')\n\nexport const phoneMask = value =>\n    value.replace(/\\D+/g, '')\n        .replace(/(\\d{2})(\\d)/, '($1) $2')\n        .replace(/(\\d{4})(\\d)/, '$1-$2')\n        .replace(/(\\d{4})-(\\d)(\\d{4})/, '$1$2-$3')\n        .replace(/(-\\d{4})\\d+?$/, '$1')\n\nexport const cnpjMask = value =>\n    value.replace(/\\D/g, '')\n        .replace(/(\\d{2})(\\d)/, '$1.$2')\n        .replace(/(\\d{3})(\\d)/, '$1.$2')\n        .replace(/(\\d{3})(\\d)/, '$1/$2')\n        .replace(/(\\d{4})(\\d)/, '$1-$2')\n        .replace(/(-\\d{2})\\d+?$/, '$1')\n\nexport const cnpjUnmask = value =>\n    value.replace(/\\D+/g, '')\n        .replace(/([0-9])/, '$1')\n\nexport const cpfMask = value =>\n    value.replace(/\\D/g, '')\n        .replace(/(\\d{3})(\\d)/, '$1.$2')\n        .replace(/(\\d{3})(\\d)/, '$1.$2')\n        .replace(/(\\d{3})(\\d{1,2})/, '$1-$2')\n        .replace(/(-\\d{2})\\d+?$/, '$1')\n\nexport const numberMask = value =>\n    value.replace(/\\D/g, '')\n        .replace(/(\\d{3})(\\d)/, '$1.$2')\n        .replace(/(\\d{3})(\\d)/, '$1.$2')\n        .replace(/(\\d{3})(\\d)/, '$1.$2')\n        .replace(/(\\d{3})(\\d)/, '$1.$2')\n\nexport const toMoney = value =>\n    Number(value).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })","import api from './api'\n\nexport const handlePowerBiGroups = async () => (await api.get(`/powerbi/groups`)).data\n\nexport const handlePowerBiReports = async id => (await api.get(`/powerbi/groups/${id}/reports`)).data\n\nexport const handlePowerBiReportAad = async values => (await api.post(`/powerbi/reports/aad`, values)).data\n\nexport const handlePowerBiReportEmbed = async values => (await api.post(`/powerbi/reports/embed`, values)).data\n","import api from './api'\nimport { setErrors } from 'utils'\n\nexport const handleReportsByUser = async userId =>\n  (await api.post(`/reports/list-by-user`, { user_id: userId })).data\n\nexport const handleReportsByUserWithCard = async userId =>\n  (await api.post(`/reports/list-by-user-with-card`, { user_id: userId })).data\n\nexport const handleReportById = async id => (await api.get(`/reports/${id}`)).data\n\nexport const handleReport = async (reportId, userId) =>\n  (await api.post(`/reports/show-by-report`, { report_id: reportId, user_id: userId })).data\n\nexport const handleStoreReport = async (history, data, userId, setMessages) => {\n  const card = JSON.parse(data.card)\n  const values = {\n    user_id: data.user_id,\n    name: card.name,\n    report_id: card.report_id,\n    group_id: card.group_id,\n    dataset_id: card.dataset_id,\n    roles: data.roles,\n    page_navigation: data.page_navigation\n  }\n  try {\n    await api.post(`/reports/store`, values)\n    return history.push(`/usuarios/${userId}/relatorios`)\n  } catch (error) {\n    setMessages({ messages: setErrors(error), alert: 'alert-orange' })\n  }\n}\n\nexport const handleUpdateReport = async (history, data, reportId, userId, setMessages) => {\n  try {\n    await api.put(`/reports/${reportId}/update`, data)\n    return history.push(`/usuarios/${userId}/relatorios`)\n  } catch (error) {\n    setMessages({ messages: setErrors(error), alert: 'alert-orange' })\n  }\n}\n\nexport const handleReportDelete = async (id, userId, history) => {\n  await api.delete(`/reports/${id}`)\n  return history.push(`/usuarios/${userId}/relatorios`)\n}","import { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { models } from 'powerbi-client'\nimport { handleReport } from 'services/api/reports'\nimport { handlePowerBiReportAad, handlePowerBiReportEmbed } from 'services/api/powerbi'\nimport { getUser } from 'services/auth'\nimport { PowerBIEmbed } from 'powerbi-client-react'\nimport './style.css'\n\nconst Page = () => {\n  const params = useParams()\n  const [data, setData] = useState({})\n  const { group_id, report_id, dataset_id } = params\n\n  useEffect(() => {\n    (async () => {\n      new Promise(resolve => resolve(getUser()))\n        .then(async res => {\n          if (res.data.roles === 'admin') {\n            const values = { report_id }\n            const reportData = await handlePowerBiReportAad(values)\n            setData({\n              reportId: reportData.reportId,\n              embedUrl: reportData.embedUrl,\n              token: reportData.accessToken,\n              type: models.TokenType.Aad\n            })\n          }\n          if (res.data.roles === 'user') {\n            const roles = await handleReport(report_id, res.data.id)\n            if (roles.roles) {\n              const values = {\n                group_id,\n                report_id,\n                dataset: dataset_id,\n                username: res.data.email,\n                roles: roles.roles\n              }\n              const reportData = await handlePowerBiReportEmbed(values)\n              setData({\n                reportId: reportData.reportId,\n                embedUrl: reportData.embedUrl,\n                token: reportData.embedToken,\n                page_navigation: roles.page_navigation,\n                type: models.TokenType.Embed\n              })\n            } else {\n              const values = { report_id }\n              const reportData = await handlePowerBiReportAad(values)\n              setData({\n                reportId: reportData.reportId,\n                embedUrl: reportData.embedUrl,\n                token: reportData.accessToken,\n                page_navigation: roles.page_navigation,\n                type: models.TokenType.Aad\n              })\n            }\n          }\n\n        })\n    })()\n  }, [group_id, report_id, dataset_id])\n\n  return (\n    <>\n      <PowerBIEmbed\n        embedConfig={{\n          type: 'report',\n          id: data.reportId,\n          embedUrl: data.embedUrl,\n          accessToken: data.token,\n          tokenType: data.type,\n          settings: {\n            panes: {\n              filters: {\n                visible: false\n              },\n              pageNavigation: {\n                visible: data.page_navigation ? data.page_navigation : false\n              }\n            }\n          }\n        }}\n        cssClassName={\"report\"}\n      />\n    </>\n  )\n}\n\nexport default Page"],"sourceRoot":""}